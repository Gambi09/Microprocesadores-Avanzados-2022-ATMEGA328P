
P10-USART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  0000029e  00000332  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000029e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000015  00800114  00800114  00000346  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000346  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000378  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  000003b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002693  00000000  00000000  000004c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000864  00000000  00000000  00002b5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bbc  00000000  00000000  000033bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000228  00000000  00000000  00003f7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000052b  00000000  00000000  000041a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001aef  00000000  00000000  000046cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  000061be  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e9       	ldi	r30, 0x9E	; 158
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 31       	cpi	r26, 0x14	; 20
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e1       	ldi	r26, 0x14	; 20
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 32       	cpi	r26, 0x29	; 41
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 17 01 	call	0x22e	; 0x22e <main>
  9e:	0c 94 4d 01 	jmp	0x29a	; 0x29a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ENVIA_CMD>:
}

void SEND_USART( unsigned char data)
{
	while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = data;
  a6:	98 2f       	mov	r25, r24
  a8:	90 7f       	andi	r25, 0xF0	; 240
  aa:	96 95       	lsr	r25
  ac:	96 95       	lsr	r25
  ae:	95 b9       	out	0x05, r25	; 5
  b0:	95 b1       	in	r25, 0x05	; 5
  b2:	9e 7f       	andi	r25, 0xFE	; 254
  b4:	95 b9       	out	0x05, r25	; 5
  b6:	95 b1       	in	r25, 0x05	; 5
  b8:	92 60       	ori	r25, 0x02	; 2
  ba:	95 b9       	out	0x05, r25	; 5
  bc:	ef e9       	ldi	r30, 0x9F	; 159
  be:	ff e0       	ldi	r31, 0x0F	; 15
  c0:	31 97       	sbiw	r30, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <ENVIA_CMD+0x1a>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <ENVIA_CMD+0x20>
  c6:	00 00       	nop
  c8:	95 b1       	in	r25, 0x05	; 5
  ca:	9d 7f       	andi	r25, 0xFD	; 253
  cc:	95 b9       	out	0x05, r25	; 5
  ce:	ef e3       	ldi	r30, 0x3F	; 63
  d0:	fc e9       	ldi	r31, 0x9C	; 156
  d2:	31 97       	sbiw	r30, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <ENVIA_CMD+0x2c>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <ENVIA_CMD+0x32>
  d8:	00 00       	nop
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	88 0f       	add	r24, r24
  de:	99 1f       	adc	r25, r25
  e0:	88 0f       	add	r24, r24
  e2:	99 1f       	adc	r25, r25
  e4:	8c 73       	andi	r24, 0x3C	; 60
  e6:	85 b9       	out	0x05, r24	; 5
  e8:	85 b1       	in	r24, 0x05	; 5
  ea:	8e 7f       	andi	r24, 0xFE	; 254
  ec:	85 b9       	out	0x05, r24	; 5
  ee:	85 b1       	in	r24, 0x05	; 5
  f0:	82 60       	ori	r24, 0x02	; 2
  f2:	85 b9       	out	0x05, r24	; 5
  f4:	8f e9       	ldi	r24, 0x9F	; 159
  f6:	9f e0       	ldi	r25, 0x0F	; 15
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <ENVIA_CMD+0x52>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <ENVIA_CMD+0x58>
  fe:	00 00       	nop
 100:	85 b1       	in	r24, 0x05	; 5
 102:	8d 7f       	andi	r24, 0xFD	; 253
 104:	85 b9       	out	0x05, r24	; 5
 106:	ef e3       	ldi	r30, 0x3F	; 63
 108:	fc e9       	ldi	r31, 0x9C	; 156
 10a:	31 97       	sbiw	r30, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <ENVIA_CMD+0x64>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <ENVIA_CMD+0x6a>
 110:	00 00       	nop
 112:	08 95       	ret

00000114 <LCD_INICIALIZA>:
 114:	82 e0       	ldi	r24, 0x02	; 2
 116:	0e 94 53 00 	call	0xa6	; 0xa6 <ENVIA_CMD>
 11a:	88 e2       	ldi	r24, 0x28	; 40
 11c:	0e 94 53 00 	call	0xa6	; 0xa6 <ENVIA_CMD>
 120:	8e e0       	ldi	r24, 0x0E	; 14
 122:	0e 94 53 00 	call	0xa6	; 0xa6 <ENVIA_CMD>
 126:	86 e0       	ldi	r24, 0x06	; 6
 128:	0e 94 53 00 	call	0xa6	; 0xa6 <ENVIA_CMD>
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	0e 94 53 00 	call	0xa6	; 0xa6 <ENVIA_CMD>
 132:	80 e8       	ldi	r24, 0x80	; 128
 134:	0e 94 53 00 	call	0xa6	; 0xa6 <ENVIA_CMD>
 138:	08 95       	ret

0000013a <ENVIA_DATO>:
 13a:	98 2f       	mov	r25, r24
 13c:	90 7f       	andi	r25, 0xF0	; 240
 13e:	96 95       	lsr	r25
 140:	96 95       	lsr	r25
 142:	95 b9       	out	0x05, r25	; 5
 144:	95 b1       	in	r25, 0x05	; 5
 146:	93 60       	ori	r25, 0x03	; 3
 148:	95 b9       	out	0x05, r25	; 5
 14a:	ef e9       	ldi	r30, 0x9F	; 159
 14c:	ff e0       	ldi	r31, 0x0F	; 15
 14e:	31 97       	sbiw	r30, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <ENVIA_DATO+0x14>
 152:	00 c0       	rjmp	.+0      	; 0x154 <ENVIA_DATO+0x1a>
 154:	00 00       	nop
 156:	95 b1       	in	r25, 0x05	; 5
 158:	9d 7f       	andi	r25, 0xFD	; 253
 15a:	95 b9       	out	0x05, r25	; 5
 15c:	95 b1       	in	r25, 0x05	; 5
 15e:	9e 7f       	andi	r25, 0xFE	; 254
 160:	95 b9       	out	0x05, r25	; 5
 162:	ef e9       	ldi	r30, 0x9F	; 159
 164:	ff e0       	ldi	r31, 0x0F	; 15
 166:	31 97       	sbiw	r30, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <ENVIA_DATO+0x2c>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <ENVIA_DATO+0x32>
 16c:	00 00       	nop
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	88 0f       	add	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	88 0f       	add	r24, r24
 176:	99 1f       	adc	r25, r25
 178:	8c 73       	andi	r24, 0x3C	; 60
 17a:	85 b9       	out	0x05, r24	; 5
 17c:	85 b1       	in	r24, 0x05	; 5
 17e:	83 60       	ori	r24, 0x03	; 3
 180:	85 b9       	out	0x05, r24	; 5
 182:	8f e9       	ldi	r24, 0x9F	; 159
 184:	9f e0       	ldi	r25, 0x0F	; 15
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <ENVIA_DATO+0x4c>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <ENVIA_DATO+0x52>
 18c:	00 00       	nop
 18e:	85 b1       	in	r24, 0x05	; 5
 190:	8d 7f       	andi	r24, 0xFD	; 253
 192:	85 b9       	out	0x05, r24	; 5
 194:	85 b1       	in	r24, 0x05	; 5
 196:	8e 7f       	andi	r24, 0xFE	; 254
 198:	85 b9       	out	0x05, r24	; 5
 19a:	ef e9       	ldi	r30, 0x9F	; 159
 19c:	ff e0       	ldi	r31, 0x0F	; 15
 19e:	31 97       	sbiw	r30, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <ENVIA_DATO+0x64>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <ENVIA_DATO+0x6a>
 1a4:	00 00       	nop
 1a6:	08 95       	ret

000001a8 <ENVIA_CADENA>:
 1a8:	0f 93       	push	r16
 1aa:	1f 93       	push	r17
 1ac:	cf 93       	push	r28
 1ae:	df 93       	push	r29
 1b0:	8c 01       	movw	r16, r24
 1b2:	c0 e0       	ldi	r28, 0x00	; 0
 1b4:	d0 e0       	ldi	r29, 0x00	; 0
 1b6:	03 c0       	rjmp	.+6      	; 0x1be <ENVIA_CADENA+0x16>
 1b8:	0e 94 9d 00 	call	0x13a	; 0x13a <ENVIA_DATO>
 1bc:	21 96       	adiw	r28, 0x01	; 1
 1be:	f8 01       	movw	r30, r16
 1c0:	ec 0f       	add	r30, r28
 1c2:	fd 1f       	adc	r31, r29
 1c4:	80 81       	ld	r24, Z
 1c6:	81 11       	cpse	r24, r1
 1c8:	f7 cf       	rjmp	.-18     	; 0x1b8 <ENVIA_CADENA+0x10>
 1ca:	df 91       	pop	r29
 1cc:	cf 91       	pop	r28
 1ce:	1f 91       	pop	r17
 1d0:	0f 91       	pop	r16
 1d2:	08 95       	ret

000001d4 <LIMPIA_LCD>:
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	0e 94 53 00 	call	0xa6	; 0xa6 <ENVIA_CMD>
 1da:	08 95       	ret

000001dc <POS_LINEA1>:
 1dc:	80 68       	ori	r24, 0x80	; 128
 1de:	0e 94 53 00 	call	0xa6	; 0xa6 <ENVIA_CMD>
 1e2:	08 95       	ret

000001e4 <POS_LINEA2>:
 1e4:	80 6c       	ori	r24, 0xC0	; 192
 1e6:	0e 94 53 00 	call	0xa6	; 0xa6 <ENVIA_CMD>
 1ea:	08 95       	ret

000001ec <RECEPT_USART>:
}

int RECEPT_USART(void)
{
	while(!(UCSR0A & (1<<RXC0)));
 1ec:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 1f0:	88 23       	and	r24, r24
 1f2:	e4 f7       	brge	.-8      	; 0x1ec <RECEPT_USART>
	return UDR0;
 1f4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	08 95       	ret

000001fc <INIT_USART>:

void INIT_USART(void){
	
	DDRB = 0xFF;
 1fc:	8f ef       	ldi	r24, 0xFF	; 255
 1fe:	84 b9       	out	0x04, r24	; 4
	UCSR0A = (0<<RXC0)|(0<<TXC0)|(0<<UDRE0)|(0<<FE0)|(0<<DOR0);
 200:	e0 ec       	ldi	r30, 0xC0	; 192
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	10 82       	st	Z, r1
	UCSR0A|= (0<<U2X0)|(0<<MPCM0); //UCSR0A= 0x00;
 206:	80 81       	ld	r24, Z
 208:	80 83       	st	Z, r24
	UCSR0B = (0<<RXCIE0)|(0<<TXCIE0)|(0<<UDRIE0)|(1<<RXEN0)|(1<<TXEN0);
 20a:	e1 ec       	ldi	r30, 0xC1	; 193
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	88 e1       	ldi	r24, 0x18	; 24
 210:	80 83       	st	Z, r24
	UCSR0B|= (0<<UCSZ02)|(0<<RXB80)|(0<<TXB80);//UCSR0B = 0b00011000;
 212:	80 81       	ld	r24, Z
 214:	80 83       	st	Z, r24
	UCSR0C = (0<<UMSEL01)|(0<<UMSEL00)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0);
 216:	e2 ec       	ldi	r30, 0xC2	; 194
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	10 82       	st	Z, r1
	UCSR0C|= (1<<UCSZ01) | (1<<UCSZ00) | (0<<UCPOL0);//0b00000110;
 21c:	80 81       	ld	r24, Z
 21e:	86 60       	ori	r24, 0x06	; 6
 220:	80 83       	st	Z, r24
	UBRR0H = 0x00;
 222:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = 0x67;
 226:	87 e6       	ldi	r24, 0x67	; 103
 228:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 22c:	08 95       	ret

0000022e <main>:
int data,ban,j=0;


int main(void)
{
	INIT_USART();
 22e:	0e 94 fe 00 	call	0x1fc	; 0x1fc <INIT_USART>
	LCD_INICIALIZA(); 
 232:	0e 94 8a 00 	call	0x114	; 0x114 <LCD_INICIALIZA>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 236:	8f e3       	ldi	r24, 0x3F	; 63
 238:	9c e9       	ldi	r25, 0x9C	; 156
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <main+0xc>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <main+0x12>
 240:	00 00       	nop
	_delay_ms(10);
	LIMPIA_LCD(); 
 242:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LIMPIA_LCD>
 246:	8f e3       	ldi	r24, 0x3F	; 63
 248:	9c e9       	ldi	r25, 0x9C	; 156
 24a:	01 97       	sbiw	r24, 0x01	; 1
 24c:	f1 f7       	brne	.-4      	; 0x24a <main+0x1c>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <main+0x22>
 250:	00 00       	nop
	_delay_ms(10);
	POS_LINEA1(0);
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	0e 94 ee 00 	call	0x1dc	; 0x1dc <POS_LINEA1>
	ENVIA_CADENA("Dato de la compu: ");
 258:	80 e0       	ldi	r24, 0x00	; 0
 25a:	91 e0       	ldi	r25, 0x01	; 1
 25c:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <ENVIA_CADENA>
	POS_LINEA2(3);
 260:	83 e0       	ldi	r24, 0x03	; 3
 262:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <POS_LINEA2>
	
	
	while (1)
	{
		data=RECEPT_USART();
 266:	0e 94 f6 00 	call	0x1ec	; 0x1ec <RECEPT_USART>
 26a:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
 26e:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
 272:	8f e3       	ldi	r24, 0x3F	; 63
 274:	9c e9       	ldi	r25, 0x9C	; 156
 276:	01 97       	sbiw	r24, 0x01	; 1
 278:	f1 f7       	brne	.-4      	; 0x276 <main+0x48>
 27a:	00 c0       	rjmp	.+0      	; 0x27c <main+0x4e>
 27c:	00 00       	nop
		_delay_ms(10);
		
			ENVIA_DATO(data);
 27e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 282:	0e 94 9d 00 	call	0x13a	; 0x13a <ENVIA_DATO>
 286:	9f ef       	ldi	r25, 0xFF	; 255
 288:	21 ee       	ldi	r18, 0xE1	; 225
 28a:	84 e0       	ldi	r24, 0x04	; 4
 28c:	91 50       	subi	r25, 0x01	; 1
 28e:	20 40       	sbci	r18, 0x00	; 0
 290:	80 40       	sbci	r24, 0x00	; 0
 292:	e1 f7       	brne	.-8      	; 0x28c <main+0x5e>
 294:	00 c0       	rjmp	.+0      	; 0x296 <main+0x68>
 296:	00 00       	nop
 298:	e6 cf       	rjmp	.-52     	; 0x266 <main+0x38>

0000029a <_exit>:
 29a:	f8 94       	cli

0000029c <__stop_program>:
 29c:	ff cf       	rjmp	.-2      	; 0x29c <__stop_program>
