
LCD_CharEspeciales.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000be  00800100  00000624  000006b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000624  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  008001be  008001be  00000776  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000776  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  000007e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017c9  00000000  00000000  000008a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007fd  00000000  00000000  00002069  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000093b  00000000  00000000  00002866  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000190  00000000  00000000  000031a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000547  00000000  00000000  00003334  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008b6  00000000  00000000  0000387b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00004131  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 43 00 	jmp	0x86	; 0x86 <__ctors_end>
   4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  10:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  14:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  18:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  1c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  20:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  24:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  28:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  2c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  30:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  34:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  38:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  3c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  40:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  44:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  48:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  4c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  50:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  54:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  58:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  5c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  60:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  68:	b9 02       	muls	r27, r25
  6a:	f7 01       	movw	r30, r14
  6c:	e1 02       	muls	r30, r17
  6e:	f7 01       	movw	r30, r14
  70:	f7 01       	movw	r30, r14
  72:	03 02       	muls	r16, r19
  74:	18 02       	muls	r17, r24
  76:	28 02       	muls	r18, r24
  78:	38 02       	muls	r19, r24
  7a:	48 02       	muls	r20, r24
  7c:	58 02       	muls	r21, r24
  7e:	68 02       	muls	r22, r24
  80:	78 02       	muls	r23, r24
  82:	88 02       	muls	r24, r24
  84:	a4 02       	muls	r26, r20

00000086 <__ctors_end>:
  86:	11 24       	eor	r1, r1
  88:	1f be       	out	0x3f, r1	; 63
  8a:	cf ef       	ldi	r28, 0xFF	; 255
  8c:	d8 e0       	ldi	r29, 0x08	; 8
  8e:	de bf       	out	0x3e, r29	; 62
  90:	cd bf       	out	0x3d, r28	; 61

00000092 <__do_copy_data>:
  92:	11 e0       	ldi	r17, 0x01	; 1
  94:	a0 e0       	ldi	r26, 0x00	; 0
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	e4 e2       	ldi	r30, 0x24	; 36
  9a:	f6 e0       	ldi	r31, 0x06	; 6
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <__do_copy_data+0x10>
  9e:	05 90       	lpm	r0, Z+
  a0:	0d 92       	st	X+, r0
  a2:	ae 3b       	cpi	r26, 0xBE	; 190
  a4:	b1 07       	cpc	r27, r17
  a6:	d9 f7       	brne	.-10     	; 0x9e <__do_copy_data+0xc>

000000a8 <__do_clear_bss>:
  a8:	21 e0       	ldi	r18, 0x01	; 1
  aa:	ae eb       	ldi	r26, 0xBE	; 190
  ac:	b1 e0       	ldi	r27, 0x01	; 1
  ae:	01 c0       	rjmp	.+2      	; 0xb2 <.do_clear_bss_start>

000000b0 <.do_clear_bss_loop>:
  b0:	1d 92       	st	X+, r1

000000b2 <.do_clear_bss_start>:
  b2:	a0 3c       	cpi	r26, 0xC0	; 192
  b4:	b2 07       	cpc	r27, r18
  b6:	e1 f7       	brne	.-8      	; 0xb0 <.do_clear_bss_loop>
  b8:	0e 94 c7 01 	call	0x38e	; 0x38e <main>
  bc:	0c 94 10 03 	jmp	0x620	; 0x620 <_exit>

000000c0 <__bad_interrupt>:
  c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c4 <ENVIA_CMD>:
	POS_LINEA2(0);
	
}
void PARPA()
{
	ENVIA_CMD(0x0F);   //0000 1111
  c4:	98 2f       	mov	r25, r24
  c6:	90 7f       	andi	r25, 0xF0	; 240
  c8:	96 95       	lsr	r25
  ca:	96 95       	lsr	r25
  cc:	98 b9       	out	0x08, r25	; 8
  ce:	98 b1       	in	r25, 0x08	; 8
  d0:	9e 7f       	andi	r25, 0xFE	; 254
  d2:	98 b9       	out	0x08, r25	; 8
  d4:	98 b1       	in	r25, 0x08	; 8
  d6:	92 60       	ori	r25, 0x02	; 2
  d8:	98 b9       	out	0x08, r25	; 8
  da:	ef e9       	ldi	r30, 0x9F	; 159
  dc:	ff e0       	ldi	r31, 0x0F	; 15
  de:	31 97       	sbiw	r30, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <ENVIA_CMD+0x1a>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <ENVIA_CMD+0x20>
  e4:	00 00       	nop
  e6:	98 b1       	in	r25, 0x08	; 8
  e8:	9d 7f       	andi	r25, 0xFD	; 253
  ea:	98 b9       	out	0x08, r25	; 8
  ec:	ef e3       	ldi	r30, 0x3F	; 63
  ee:	fc e9       	ldi	r31, 0x9C	; 156
  f0:	31 97       	sbiw	r30, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <ENVIA_CMD+0x2c>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <ENVIA_CMD+0x32>
  f6:	00 00       	nop
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	88 0f       	add	r24, r24
  fc:	99 1f       	adc	r25, r25
  fe:	88 0f       	add	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	8c 73       	andi	r24, 0x3C	; 60
 104:	88 b9       	out	0x08, r24	; 8
 106:	88 b1       	in	r24, 0x08	; 8
 108:	8e 7f       	andi	r24, 0xFE	; 254
 10a:	88 b9       	out	0x08, r24	; 8
 10c:	88 b1       	in	r24, 0x08	; 8
 10e:	82 60       	ori	r24, 0x02	; 2
 110:	88 b9       	out	0x08, r24	; 8
 112:	8f e9       	ldi	r24, 0x9F	; 159
 114:	9f e0       	ldi	r25, 0x0F	; 15
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <ENVIA_CMD+0x52>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <ENVIA_CMD+0x58>
 11c:	00 00       	nop
 11e:	88 b1       	in	r24, 0x08	; 8
 120:	8d 7f       	andi	r24, 0xFD	; 253
 122:	88 b9       	out	0x08, r24	; 8
 124:	ef e3       	ldi	r30, 0x3F	; 63
 126:	fc e9       	ldi	r31, 0x9C	; 156
 128:	31 97       	sbiw	r30, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <ENVIA_CMD+0x64>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <ENVIA_CMD+0x6a>
 12e:	00 00       	nop
 130:	08 95       	ret

00000132 <LCD_INICIALIZA>:
 132:	8f ef       	ldi	r24, 0xFF	; 255
 134:	87 b9       	out	0x07, r24	; 7
 136:	8f e5       	ldi	r24, 0x5F	; 95
 138:	9a ee       	ldi	r25, 0xEA	; 234
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <LCD_INICIALIZA+0x8>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <LCD_INICIALIZA+0xe>
 140:	00 00       	nop
 142:	82 e0       	ldi	r24, 0x02	; 2
 144:	0e 94 62 00 	call	0xc4	; 0xc4 <ENVIA_CMD>
 148:	88 e2       	ldi	r24, 0x28	; 40
 14a:	0e 94 62 00 	call	0xc4	; 0xc4 <ENVIA_CMD>
 14e:	8c e0       	ldi	r24, 0x0C	; 12
 150:	0e 94 62 00 	call	0xc4	; 0xc4 <ENVIA_CMD>
 154:	86 e0       	ldi	r24, 0x06	; 6
 156:	0e 94 62 00 	call	0xc4	; 0xc4 <ENVIA_CMD>
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	0e 94 62 00 	call	0xc4	; 0xc4 <ENVIA_CMD>
 160:	80 e8       	ldi	r24, 0x80	; 128
 162:	0e 94 62 00 	call	0xc4	; 0xc4 <ENVIA_CMD>
 166:	08 95       	ret

00000168 <ENVIA_DATO>:
 168:	98 2f       	mov	r25, r24
 16a:	90 7f       	andi	r25, 0xF0	; 240
 16c:	96 95       	lsr	r25
 16e:	96 95       	lsr	r25
 170:	98 b9       	out	0x08, r25	; 8
 172:	98 b1       	in	r25, 0x08	; 8
 174:	93 60       	ori	r25, 0x03	; 3
 176:	98 b9       	out	0x08, r25	; 8
 178:	ef e9       	ldi	r30, 0x9F	; 159
 17a:	ff e0       	ldi	r31, 0x0F	; 15
 17c:	31 97       	sbiw	r30, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <ENVIA_DATO+0x14>
 180:	00 c0       	rjmp	.+0      	; 0x182 <ENVIA_DATO+0x1a>
 182:	00 00       	nop
 184:	98 b1       	in	r25, 0x08	; 8
 186:	9d 7f       	andi	r25, 0xFD	; 253
 188:	98 b9       	out	0x08, r25	; 8
 18a:	98 b1       	in	r25, 0x08	; 8
 18c:	9e 7f       	andi	r25, 0xFE	; 254
 18e:	98 b9       	out	0x08, r25	; 8
 190:	ef e3       	ldi	r30, 0x3F	; 63
 192:	fc e9       	ldi	r31, 0x9C	; 156
 194:	31 97       	sbiw	r30, 0x01	; 1
 196:	f1 f7       	brne	.-4      	; 0x194 <ENVIA_DATO+0x2c>
 198:	00 c0       	rjmp	.+0      	; 0x19a <ENVIA_DATO+0x32>
 19a:	00 00       	nop
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	88 0f       	add	r24, r24
 1a0:	99 1f       	adc	r25, r25
 1a2:	88 0f       	add	r24, r24
 1a4:	99 1f       	adc	r25, r25
 1a6:	8c 73       	andi	r24, 0x3C	; 60
 1a8:	88 b9       	out	0x08, r24	; 8
 1aa:	88 b1       	in	r24, 0x08	; 8
 1ac:	83 60       	ori	r24, 0x03	; 3
 1ae:	88 b9       	out	0x08, r24	; 8
 1b0:	8f e9       	ldi	r24, 0x9F	; 159
 1b2:	9f e0       	ldi	r25, 0x0F	; 15
 1b4:	01 97       	sbiw	r24, 0x01	; 1
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <ENVIA_DATO+0x4c>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <ENVIA_DATO+0x52>
 1ba:	00 00       	nop
 1bc:	88 b1       	in	r24, 0x08	; 8
 1be:	8d 7f       	andi	r24, 0xFD	; 253
 1c0:	88 b9       	out	0x08, r24	; 8
 1c2:	88 b1       	in	r24, 0x08	; 8
 1c4:	8e 7f       	andi	r24, 0xFE	; 254
 1c6:	88 b9       	out	0x08, r24	; 8
 1c8:	ef e3       	ldi	r30, 0x3F	; 63
 1ca:	fc e9       	ldi	r31, 0x9C	; 156
 1cc:	31 97       	sbiw	r30, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <ENVIA_DATO+0x64>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <ENVIA_DATO+0x6a>
 1d2:	00 00       	nop
 1d4:	08 95       	ret

000001d6 <CreateCustomChar>:
 1d6:	0f 93       	push	r16
 1d8:	1f 93       	push	r17
 1da:	cf 93       	push	r28
 1dc:	df 93       	push	r29
 1de:	8c 01       	movw	r16, r24
 1e0:	86 2f       	mov	r24, r22
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	08 96       	adiw	r24, 0x08	; 8
 1e6:	88 0f       	add	r24, r24
 1e8:	88 0f       	add	r24, r24
 1ea:	88 0f       	add	r24, r24
 1ec:	0e 94 62 00 	call	0xc4	; 0xc4 <ENVIA_CMD>
 1f0:	c0 e0       	ldi	r28, 0x00	; 0
 1f2:	d0 e0       	ldi	r29, 0x00	; 0
 1f4:	07 c0       	rjmp	.+14     	; 0x204 <CreateCustomChar+0x2e>
 1f6:	f8 01       	movw	r30, r16
 1f8:	ec 0f       	add	r30, r28
 1fa:	fd 1f       	adc	r31, r29
 1fc:	80 81       	ld	r24, Z
 1fe:	0e 94 b4 00 	call	0x168	; 0x168 <ENVIA_DATO>
 202:	21 96       	adiw	r28, 0x01	; 1
 204:	c8 30       	cpi	r28, 0x08	; 8
 206:	d1 05       	cpc	r29, r1
 208:	b4 f3       	brlt	.-20     	; 0x1f6 <CreateCustomChar+0x20>
 20a:	df 91       	pop	r29
 20c:	cf 91       	pop	r28
 20e:	1f 91       	pop	r17
 210:	0f 91       	pop	r16
 212:	08 95       	ret

00000214 <ENVIA_CADENA>:
 214:	0f 93       	push	r16
 216:	1f 93       	push	r17
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	8c 01       	movw	r16, r24
 21e:	c0 e0       	ldi	r28, 0x00	; 0
 220:	d0 e0       	ldi	r29, 0x00	; 0
 222:	03 c0       	rjmp	.+6      	; 0x22a <ENVIA_CADENA+0x16>
 224:	0e 94 b4 00 	call	0x168	; 0x168 <ENVIA_DATO>
 228:	21 96       	adiw	r28, 0x01	; 1
 22a:	f8 01       	movw	r30, r16
 22c:	ec 0f       	add	r30, r28
 22e:	fd 1f       	adc	r31, r29
 230:	80 81       	ld	r24, Z
 232:	81 11       	cpse	r24, r1
 234:	f7 cf       	rjmp	.-18     	; 0x224 <ENVIA_CADENA+0x10>
 236:	df 91       	pop	r29
 238:	cf 91       	pop	r28
 23a:	1f 91       	pop	r17
 23c:	0f 91       	pop	r16
 23e:	08 95       	ret

00000240 <LIMPIA_LCD>:
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	0e 94 62 00 	call	0xc4	; 0xc4 <ENVIA_CMD>
 246:	08 95       	ret

00000248 <REGRESO_CASA>:
 248:	82 e0       	ldi	r24, 0x02	; 2
 24a:	0e 94 62 00 	call	0xc4	; 0xc4 <ENVIA_CMD>
 24e:	08 95       	ret

00000250 <CURSOR_DER>:
 250:	8c e1       	ldi	r24, 0x1C	; 28
 252:	0e 94 62 00 	call	0xc4	; 0xc4 <ENVIA_CMD>
 256:	08 95       	ret

00000258 <POS_LINEA1>:
 258:	80 68       	ori	r24, 0x80	; 128
 25a:	0e 94 62 00 	call	0xc4	; 0xc4 <ENVIA_CMD>
 25e:	08 95       	ret

00000260 <POS_LINEA2>:
 260:	80 6c       	ori	r24, 0xC0	; 192
 262:	0e 94 62 00 	call	0xc4	; 0xc4 <ENVIA_CMD>
 266:	08 95       	ret

00000268 <keyfind>:

char keyfind()
{
	while(1)
	{
		DDRD = 0xF0;           /* configuramos puerto input-output */
 268:	80 ef       	ldi	r24, 0xF0	; 240
 26a:	8a b9       	out	0x0a, r24	; 10
		PORTD = 0xFF;
 26c:	8f ef       	ldi	r24, 0xFF	; 255
 26e:	8b b9       	out	0x0b, r24	; 11

		do
		{
			PORTD &= 0x0F;      /* macara PORD para column read only */
 270:	8b b1       	in	r24, 0x0b	; 11
 272:	8f 70       	andi	r24, 0x0F	; 15
 274:	8b b9       	out	0x0b, r24	; 11
			asm("NOP");
 276:	00 00       	nop
			colloc = (KEY_PIN & 0x0F); /* leyendo columna */
 278:	89 b1       	in	r24, 0x09	; 9
 27a:	8f 70       	andi	r24, 0x0F	; 15
 27c:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <__data_end>
		}while(colloc != 0x0F);
 280:	8f 30       	cpi	r24, 0x0F	; 15
 282:	b1 f7       	brne	.-20     	; 0x270 <keyfind+0x8>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 284:	2f ef       	ldi	r18, 0xFF	; 255
 286:	89 ef       	ldi	r24, 0xF9	; 249
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	21 50       	subi	r18, 0x01	; 1
 28c:	80 40       	sbci	r24, 0x00	; 0
 28e:	90 40       	sbci	r25, 0x00	; 0
 290:	e1 f7       	brne	.-8      	; 0x28a <keyfind+0x22>
 292:	00 c0       	rjmp	.+0      	; 0x294 <keyfind+0x2c>
 294:	00 00       	nop
		do
		{
			do
			{
				_delay_ms(20);             /* 20ms  */
				colloc = (KEY_PIN & 0x0F); /* leyendo columna */
 296:	89 b1       	in	r24, 0x09	; 9
 298:	8f 70       	andi	r24, 0x0F	; 15
 29a:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <__data_end>
				}while(colloc == 0x0F);        /* buscando presion de un boton */
 29e:	8f 30       	cpi	r24, 0x0F	; 15
 2a0:	89 f3       	breq	.-30     	; 0x284 <keyfind+0x1c>
 2a2:	2f ef       	ldi	r18, 0xFF	; 255
 2a4:	83 ef       	ldi	r24, 0xF3	; 243
 2a6:	91 e0       	ldi	r25, 0x01	; 1
 2a8:	21 50       	subi	r18, 0x01	; 1
 2aa:	80 40       	sbci	r24, 0x00	; 0
 2ac:	90 40       	sbci	r25, 0x00	; 0
 2ae:	e1 f7       	brne	.-8      	; 0x2a8 <keyfind+0x40>
 2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <keyfind+0x4a>
 2b2:	00 00       	nop
				
				_delay_ms (40);	            /* 20 ms */
				colloc = (KEY_PIN & 0x0F);
 2b4:	89 b1       	in	r24, 0x09	; 9
 2b6:	8f 70       	andi	r24, 0x0F	; 15
 2b8:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <__data_end>
			}while(colloc == 0x0F);
 2bc:	8f 30       	cpi	r24, 0x0F	; 15
 2be:	11 f3       	breq	.-60     	; 0x284 <keyfind+0x1c>

			/* now check for rows */
			PORTD = 0xEF;            /* check for pressed key in 1st row */
 2c0:	8f ee       	ldi	r24, 0xEF	; 239
 2c2:	8b b9       	out	0x0b, r24	; 11
			asm("NOP");
 2c4:	00 00       	nop
			colloc = (KEY_PIN & 0x0F);
 2c6:	89 b1       	in	r24, 0x09	; 9
 2c8:	8f 70       	andi	r24, 0x0F	; 15
 2ca:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <__data_end>
			if(colloc != 0x0F)
 2ce:	8f 30       	cpi	r24, 0x0F	; 15
 2d0:	19 f0       	breq	.+6      	; 0x2d8 <keyfind+0x70>
			{
				rowloc = 0;
 2d2:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <rowloc>
				break;
 2d6:	27 c0       	rjmp	.+78     	; 0x326 <keyfind+0xbe>
			}

			KEY_PRT = 0xDF;		/* han presionado en 2nd row? */
 2d8:	8f ed       	ldi	r24, 0xDF	; 223
 2da:	8b b9       	out	0x0b, r24	; 11
			asm("NOP");
 2dc:	00 00       	nop
			colloc = (KEY_PIN & 0x0F);
 2de:	89 b1       	in	r24, 0x09	; 9
 2e0:	8f 70       	andi	r24, 0x0F	; 15
 2e2:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <__data_end>
			if(colloc != 0x0F)
 2e6:	8f 30       	cpi	r24, 0x0F	; 15
 2e8:	21 f0       	breq	.+8      	; 0x2f2 <keyfind+0x8a>
			{
				rowloc = 1;
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <rowloc>
				break;
 2f0:	1a c0       	rjmp	.+52     	; 0x326 <keyfind+0xbe>
			}
			
			KEY_PRT = 0xBF;		/* han presionado en 3nd row? */
 2f2:	8f eb       	ldi	r24, 0xBF	; 191
 2f4:	8b b9       	out	0x0b, r24	; 11
			asm("NOP");
 2f6:	00 00       	nop
			colloc = (KEY_PIN & 0x0F);
 2f8:	89 b1       	in	r24, 0x09	; 9
 2fa:	8f 70       	andi	r24, 0x0F	; 15
 2fc:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <__data_end>
			if(colloc != 0x0F)
 300:	8f 30       	cpi	r24, 0x0F	; 15
 302:	21 f0       	breq	.+8      	; 0x30c <keyfind+0xa4>
			{
				rowloc = 2;
 304:	82 e0       	ldi	r24, 0x02	; 2
 306:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <rowloc>
				break;
 30a:	0d c0       	rjmp	.+26     	; 0x326 <keyfind+0xbe>
			}

			KEY_PRT = 0x7F;		/* han presionado en 4th row? */
 30c:	8f e7       	ldi	r24, 0x7F	; 127
 30e:	8b b9       	out	0x0b, r24	; 11
			asm("NOP");
 310:	00 00       	nop
			colloc = (KEY_PIN & 0x0F);
 312:	89 b1       	in	r24, 0x09	; 9
 314:	8f 70       	andi	r24, 0x0F	; 15
 316:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <__data_end>
			if(colloc != 0x0F)
 31a:	8f 30       	cpi	r24, 0x0F	; 15
 31c:	09 f4       	brne	.+2      	; 0x320 <keyfind+0xb8>
 31e:	a4 cf       	rjmp	.-184    	; 0x268 <keyfind>
			{
				rowloc = 3;
 320:	83 e0       	ldi	r24, 0x03	; 3
 322:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <rowloc>
				break;
			}
		}

		if(colloc == 0x0E)
 326:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <__data_end>
 32a:	8e 30       	cpi	r24, 0x0E	; 14
 32c:	59 f4       	brne	.+22     	; 0x344 <keyfind+0xdc>
		return(keypad[rowloc][0]);
 32e:	e0 91 bf 01 	lds	r30, 0x01BF	; 0x8001bf <rowloc>
 332:	f0 e0       	ldi	r31, 0x00	; 0
 334:	ee 0f       	add	r30, r30
 336:	ff 1f       	adc	r31, r31
 338:	ee 0f       	add	r30, r30
 33a:	ff 1f       	adc	r31, r31
 33c:	e8 59       	subi	r30, 0x98	; 152
 33e:	fe 4f       	sbci	r31, 0xFE	; 254
 340:	80 81       	ld	r24, Z
 342:	08 95       	ret
		else if(colloc == 0x0D)
 344:	8d 30       	cpi	r24, 0x0D	; 13
 346:	59 f4       	brne	.+22     	; 0x35e <keyfind+0xf6>
		return(keypad[rowloc][1]);
 348:	e0 91 bf 01 	lds	r30, 0x01BF	; 0x8001bf <rowloc>
 34c:	f0 e0       	ldi	r31, 0x00	; 0
 34e:	ee 0f       	add	r30, r30
 350:	ff 1f       	adc	r31, r31
 352:	ee 0f       	add	r30, r30
 354:	ff 1f       	adc	r31, r31
 356:	e8 59       	subi	r30, 0x98	; 152
 358:	fe 4f       	sbci	r31, 0xFE	; 254
 35a:	81 81       	ldd	r24, Z+1	; 0x01
 35c:	08 95       	ret
		else if(colloc == 0x0B)
 35e:	8b 30       	cpi	r24, 0x0B	; 11
 360:	59 f4       	brne	.+22     	; 0x378 <keyfind+0x110>
		return(keypad[rowloc][2]);
 362:	e0 91 bf 01 	lds	r30, 0x01BF	; 0x8001bf <rowloc>
 366:	f0 e0       	ldi	r31, 0x00	; 0
 368:	ee 0f       	add	r30, r30
 36a:	ff 1f       	adc	r31, r31
 36c:	ee 0f       	add	r30, r30
 36e:	ff 1f       	adc	r31, r31
 370:	e8 59       	subi	r30, 0x98	; 152
 372:	fe 4f       	sbci	r31, 0xFE	; 254
 374:	82 81       	ldd	r24, Z+2	; 0x02
 376:	08 95       	ret
		else
		return(keypad[rowloc][3]);
 378:	e0 91 bf 01 	lds	r30, 0x01BF	; 0x8001bf <rowloc>
 37c:	f0 e0       	ldi	r31, 0x00	; 0
 37e:	ee 0f       	add	r30, r30
 380:	ff 1f       	adc	r31, r31
 382:	ee 0f       	add	r30, r30
 384:	ff 1f       	adc	r31, r31
 386:	e8 59       	subi	r30, 0x98	; 152
 388:	fe 4f       	sbci	r31, 0xFE	; 254
 38a:	83 81       	ldd	r24, Z+3	; 0x03
	}
 38c:	08 95       	ret

0000038e <main>:
int main(void)

{
	
	char a;
	LCD_INICIALIZA();
 38e:	0e 94 99 00 	call	0x132	; 0x132 <LCD_INICIALIZA>
	REGRESO_CASA();
 392:	0e 94 24 01 	call	0x248	; 0x248 <REGRESO_CASA>
	CURSOR_DER();
 396:	0e 94 28 01 	call	0x250	; 0x250 <CURSOR_DER>
	
	CreateCustomChar(pattern0,0);
 39a:	60 e0       	ldi	r22, 0x00	; 0
 39c:	80 e6       	ldi	r24, 0x60	; 96
 39e:	91 e0       	ldi	r25, 0x01	; 1
 3a0:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <CreateCustomChar>
	CreateCustomChar(pattern1,1);
 3a4:	61 e0       	ldi	r22, 0x01	; 1
 3a6:	88 e5       	ldi	r24, 0x58	; 88
 3a8:	91 e0       	ldi	r25, 0x01	; 1
 3aa:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <CreateCustomChar>
	CreateCustomChar(pattern2,2);
 3ae:	62 e0       	ldi	r22, 0x02	; 2
 3b0:	80 e5       	ldi	r24, 0x50	; 80
 3b2:	91 e0       	ldi	r25, 0x01	; 1
 3b4:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <CreateCustomChar>
	CreateCustomChar(pattern3,3);
 3b8:	63 e0       	ldi	r22, 0x03	; 3
 3ba:	88 e4       	ldi	r24, 0x48	; 72
 3bc:	91 e0       	ldi	r25, 0x01	; 1
 3be:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <CreateCustomChar>
	
	CreateCustomChar(pattern4,4);
 3c2:	64 e0       	ldi	r22, 0x04	; 4
 3c4:	80 e4       	ldi	r24, 0x40	; 64
 3c6:	91 e0       	ldi	r25, 0x01	; 1
 3c8:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <CreateCustomChar>
	CreateCustomChar(pattern5,5);
 3cc:	65 e0       	ldi	r22, 0x05	; 5
 3ce:	88 e3       	ldi	r24, 0x38	; 56
 3d0:	91 e0       	ldi	r25, 0x01	; 1
 3d2:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <CreateCustomChar>
	CreateCustomChar(pattern6,6);
 3d6:	66 e0       	ldi	r22, 0x06	; 6
 3d8:	80 e3       	ldi	r24, 0x30	; 48
 3da:	91 e0       	ldi	r25, 0x01	; 1
 3dc:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <CreateCustomChar>
	CreateCustomChar(pattern7,7);
 3e0:	67 e0       	ldi	r22, 0x07	; 7
 3e2:	88 e2       	ldi	r24, 0x28	; 40
 3e4:	91 e0       	ldi	r25, 0x01	; 1
 3e6:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <CreateCustomChar>

	DDRB =0XFF;
 3ea:	8f ef       	ldi	r24, 0xFF	; 255
 3ec:	84 b9       	out	0x04, r24	; 4
		
		//LCD_INICIALIZA();
		//CAR_ESP0();
		//a = LEER_TECLADO();
		
		char op = keyfind();
 3ee:	0e 94 34 01 	call	0x268	; 0x268 <keyfind>
		
		switch(op){
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	fc 01       	movw	r30, r24
 3f6:	bb 97       	sbiw	r30, 0x2b	; 43
 3f8:	ef 30       	cpi	r30, 0x0F	; 15
 3fa:	f1 05       	cpc	r31, r1
 3fc:	c0 f7       	brcc	.-16     	; 0x3ee <main+0x60>
 3fe:	ec 5c       	subi	r30, 0xCC	; 204
 400:	ff 4f       	sbci	r31, 0xFF	; 255
 402:	0c 94 0a 03 	jmp	0x614	; 0x614 <__tablejump2__>
			case '0':
			LIMPIA_LCD();
 406:	0e 94 20 01 	call	0x240	; 0x240 <LIMPIA_LCD>
			CreateCustomChar(pattern0,0);
 40a:	60 e0       	ldi	r22, 0x00	; 0
 40c:	80 e6       	ldi	r24, 0x60	; 96
 40e:	91 e0       	ldi	r25, 0x01	; 1
 410:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <CreateCustomChar>
			ENVIA_CMD(0x86);
 414:	86 e8       	ldi	r24, 0x86	; 134
 416:	0e 94 62 00 	call	0xc4	; 0xc4 <ENVIA_CMD>
			ENVIA_DATO(0);
 41a:	80 e0       	ldi	r24, 0x00	; 0
 41c:	0e 94 b4 00 	call	0x168	; 0x168 <ENVIA_DATO>
			POS_LINEA2(3);
 420:	83 e0       	ldi	r24, 0x03	; 3
 422:	0e 94 30 01 	call	0x260	; 0x260 <POS_LINEA2>
			ENVIA_CADENA("0 - P");
 426:	88 e7       	ldi	r24, 0x78	; 120
 428:	91 e0       	ldi	r25, 0x01	; 1
 42a:	0e 94 0a 01 	call	0x214	; 0x214 <ENVIA_CADENA>
			//_delay_ms(200);
			break;
 42e:	df cf       	rjmp	.-66     	; 0x3ee <main+0x60>
			case '1':
			LIMPIA_LCD();
 430:	0e 94 20 01 	call	0x240	; 0x240 <LIMPIA_LCD>
			ENVIA_CMD(0x86);
 434:	86 e8       	ldi	r24, 0x86	; 134
 436:	0e 94 62 00 	call	0xc4	; 0xc4 <ENVIA_CMD>
			ENVIA_DATO(1);
 43a:	81 e0       	ldi	r24, 0x01	; 1
 43c:	0e 94 b4 00 	call	0x168	; 0x168 <ENVIA_DATO>
			POS_LINEA2(3);
 440:	83 e0       	ldi	r24, 0x03	; 3
 442:	0e 94 30 01 	call	0x260	; 0x260 <POS_LINEA2>
			ENVIA_CADENA("1 - P");
 446:	8e e7       	ldi	r24, 0x7E	; 126
 448:	91 e0       	ldi	r25, 0x01	; 1
 44a:	0e 94 0a 01 	call	0x214	; 0x214 <ENVIA_CADENA>
			//_delay_ms(200);
			break;
 44e:	cf cf       	rjmp	.-98     	; 0x3ee <main+0x60>
			case '2':
			LIMPIA_LCD();
 450:	0e 94 20 01 	call	0x240	; 0x240 <LIMPIA_LCD>
			ENVIA_CMD(0x86);
 454:	86 e8       	ldi	r24, 0x86	; 134
 456:	0e 94 62 00 	call	0xc4	; 0xc4 <ENVIA_CMD>
			ENVIA_DATO(2);
 45a:	82 e0       	ldi	r24, 0x02	; 2
 45c:	0e 94 b4 00 	call	0x168	; 0x168 <ENVIA_DATO>
			POS_LINEA2(3);
 460:	83 e0       	ldi	r24, 0x03	; 3
 462:	0e 94 30 01 	call	0x260	; 0x260 <POS_LINEA2>
			ENVIA_CADENA("2 - P");
 466:	84 e8       	ldi	r24, 0x84	; 132
 468:	91 e0       	ldi	r25, 0x01	; 1
 46a:	0e 94 0a 01 	call	0x214	; 0x214 <ENVIA_CADENA>
			//_delay_ms(200);
			break;
 46e:	bf cf       	rjmp	.-130    	; 0x3ee <main+0x60>
			case '3':
			LIMPIA_LCD();
 470:	0e 94 20 01 	call	0x240	; 0x240 <LIMPIA_LCD>
			ENVIA_CMD(0x86);
 474:	86 e8       	ldi	r24, 0x86	; 134
 476:	0e 94 62 00 	call	0xc4	; 0xc4 <ENVIA_CMD>
			ENVIA_DATO(3);
 47a:	83 e0       	ldi	r24, 0x03	; 3
 47c:	0e 94 b4 00 	call	0x168	; 0x168 <ENVIA_DATO>
			POS_LINEA2(3);
 480:	83 e0       	ldi	r24, 0x03	; 3
 482:	0e 94 30 01 	call	0x260	; 0x260 <POS_LINEA2>
			ENVIA_CADENA("3 - P");
 486:	8a e8       	ldi	r24, 0x8A	; 138
 488:	91 e0       	ldi	r25, 0x01	; 1
 48a:	0e 94 0a 01 	call	0x214	; 0x214 <ENVIA_CADENA>
			//_delay_ms(200);
			break;
 48e:	af cf       	rjmp	.-162    	; 0x3ee <main+0x60>
			case '4':
			LIMPIA_LCD();
 490:	0e 94 20 01 	call	0x240	; 0x240 <LIMPIA_LCD>
			ENVIA_CMD(0x86);
 494:	86 e8       	ldi	r24, 0x86	; 134
 496:	0e 94 62 00 	call	0xc4	; 0xc4 <ENVIA_CMD>
			ENVIA_DATO(4);
 49a:	84 e0       	ldi	r24, 0x04	; 4
 49c:	0e 94 b4 00 	call	0x168	; 0x168 <ENVIA_DATO>
			POS_LINEA2(3);
 4a0:	83 e0       	ldi	r24, 0x03	; 3
 4a2:	0e 94 30 01 	call	0x260	; 0x260 <POS_LINEA2>
			ENVIA_CADENA("4 - J");
 4a6:	80 e9       	ldi	r24, 0x90	; 144
 4a8:	91 e0       	ldi	r25, 0x01	; 1
 4aa:	0e 94 0a 01 	call	0x214	; 0x214 <ENVIA_CADENA>
			//_delay_ms(200);
			break;
 4ae:	9f cf       	rjmp	.-194    	; 0x3ee <main+0x60>
			case '5':
			LIMPIA_LCD();
 4b0:	0e 94 20 01 	call	0x240	; 0x240 <LIMPIA_LCD>
			ENVIA_CMD(0x86);
 4b4:	86 e8       	ldi	r24, 0x86	; 134
 4b6:	0e 94 62 00 	call	0xc4	; 0xc4 <ENVIA_CMD>
			ENVIA_DATO(5);
 4ba:	85 e0       	ldi	r24, 0x05	; 5
 4bc:	0e 94 b4 00 	call	0x168	; 0x168 <ENVIA_DATO>
			POS_LINEA2(3);
 4c0:	83 e0       	ldi	r24, 0x03	; 3
 4c2:	0e 94 30 01 	call	0x260	; 0x260 <POS_LINEA2>
			ENVIA_CADENA("5 - J");
 4c6:	86 e9       	ldi	r24, 0x96	; 150
 4c8:	91 e0       	ldi	r25, 0x01	; 1
 4ca:	0e 94 0a 01 	call	0x214	; 0x214 <ENVIA_CADENA>
			//_delay_ms(200);
			break;
 4ce:	8f cf       	rjmp	.-226    	; 0x3ee <main+0x60>
			case '6':
			LIMPIA_LCD();
 4d0:	0e 94 20 01 	call	0x240	; 0x240 <LIMPIA_LCD>
			ENVIA_CMD(0x86);
 4d4:	86 e8       	ldi	r24, 0x86	; 134
 4d6:	0e 94 62 00 	call	0xc4	; 0xc4 <ENVIA_CMD>
			ENVIA_DATO(6);
 4da:	86 e0       	ldi	r24, 0x06	; 6
 4dc:	0e 94 b4 00 	call	0x168	; 0x168 <ENVIA_DATO>
			POS_LINEA2(3);
 4e0:	83 e0       	ldi	r24, 0x03	; 3
 4e2:	0e 94 30 01 	call	0x260	; 0x260 <POS_LINEA2>
			ENVIA_CADENA("6 - J");
 4e6:	8c e9       	ldi	r24, 0x9C	; 156
 4e8:	91 e0       	ldi	r25, 0x01	; 1
 4ea:	0e 94 0a 01 	call	0x214	; 0x214 <ENVIA_CADENA>
			//_delay_ms(200);
			break;
 4ee:	7f cf       	rjmp	.-258    	; 0x3ee <main+0x60>
			case '7':
			LIMPIA_LCD();
 4f0:	0e 94 20 01 	call	0x240	; 0x240 <LIMPIA_LCD>
			ENVIA_CMD(0x86);
 4f4:	86 e8       	ldi	r24, 0x86	; 134
 4f6:	0e 94 62 00 	call	0xc4	; 0xc4 <ENVIA_CMD>
			ENVIA_DATO(7);
 4fa:	87 e0       	ldi	r24, 0x07	; 7
 4fc:	0e 94 b4 00 	call	0x168	; 0x168 <ENVIA_DATO>
			POS_LINEA2(3);
 500:	83 e0       	ldi	r24, 0x03	; 3
 502:	0e 94 30 01 	call	0x260	; 0x260 <POS_LINEA2>
			ENVIA_CADENA("7 - J");
 506:	82 ea       	ldi	r24, 0xA2	; 162
 508:	91 e0       	ldi	r25, 0x01	; 1
 50a:	0e 94 0a 01 	call	0x214	; 0x214 <ENVIA_CADENA>
			//_delay_ms(200);
			break;
 50e:	6f cf       	rjmp	.-290    	; 0x3ee <main+0x60>
			case '8':
			LIMPIA_LCD();
 510:	0e 94 20 01 	call	0x240	; 0x240 <LIMPIA_LCD>
			POS_LINEA2(3);
 514:	83 e0       	ldi	r24, 0x03	; 3
 516:	0e 94 30 01 	call	0x260	; 0x260 <POS_LINEA2>
			ENVIA_CADENA("8");
 51a:	88 ea       	ldi	r24, 0xA8	; 168
 51c:	91 e0       	ldi	r25, 0x01	; 1
 51e:	0e 94 0a 01 	call	0x214	; 0x214 <ENVIA_CADENA>
			ENVIA_DATO(0);
 522:	80 e0       	ldi	r24, 0x00	; 0
 524:	0e 94 b4 00 	call	0x168	; 0x168 <ENVIA_DATO>
			CreateCustomChar(rain1,0);
 528:	60 e0       	ldi	r22, 0x00	; 0
 52a:	80 e2       	ldi	r24, 0x20	; 32
 52c:	91 e0       	ldi	r25, 0x01	; 1
 52e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <CreateCustomChar>
			
			ENVIA_CMD(0x86);
 532:	86 e8       	ldi	r24, 0x86	; 134
 534:	0e 94 62 00 	call	0xc4	; 0xc4 <ENVIA_CMD>
			ENVIA_DATO(0);
 538:	80 e0       	ldi	r24, 0x00	; 0
 53a:	0e 94 b4 00 	call	0x168	; 0x168 <ENVIA_DATO>
			ENVIA_CADENA("HEY ");
 53e:	8a ea       	ldi	r24, 0xAA	; 170
 540:	91 e0       	ldi	r25, 0x01	; 1
 542:	0e 94 0a 01 	call	0x214	; 0x214 <ENVIA_CADENA>
			//_delay_ms(200);
			break;
 546:	53 cf       	rjmp	.-346    	; 0x3ee <main+0x60>
			case '9':
			LIMPIA_LCD();
 548:	0e 94 20 01 	call	0x240	; 0x240 <LIMPIA_LCD>
			CURSOR_DER();
 54c:	0e 94 28 01 	call	0x250	; 0x250 <CURSOR_DER>
			ENVIA_DATO(0);
 550:	80 e0       	ldi	r24, 0x00	; 0
 552:	0e 94 b4 00 	call	0x168	; 0x168 <ENVIA_DATO>
			POS_LINEA1(1);
 556:	81 e0       	ldi	r24, 0x01	; 1
 558:	0e 94 2c 01 	call	0x258	; 0x258 <POS_LINEA1>
			ENVIA_DATO('9');
 55c:	89 e3       	ldi	r24, 0x39	; 57
 55e:	0e 94 b4 00 	call	0x168	; 0x168 <ENVIA_DATO>
			POS_LINEA2(1);
 562:	81 e0       	ldi	r24, 0x01	; 1
 564:	0e 94 30 01 	call	0x260	; 0x260 <POS_LINEA2>
			ENVIA_CADENA("Jazmin Flores");
 568:	8f ea       	ldi	r24, 0xAF	; 175
 56a:	91 e0       	ldi	r25, 0x01	; 1
 56c:	0e 94 0a 01 	call	0x214	; 0x214 <ENVIA_CADENA>
			
			break;
 570:	3e cf       	rjmp	.-388    	; 0x3ee <main+0x60>
			
			case '+':
			LIMPIA_LCD();
 572:	0e 94 20 01 	call	0x240	; 0x240 <LIMPIA_LCD>
			CURSOR_DER();
 576:	0e 94 28 01 	call	0x250	; 0x250 <CURSOR_DER>
			
			POS_LINEA2(4);
 57a:	84 e0       	ldi	r24, 0x04	; 4
 57c:	0e 94 30 01 	call	0x260	; 0x260 <POS_LINEA2>
			ENVIA_DATO(4);
 580:	84 e0       	ldi	r24, 0x04	; 4
 582:	0e 94 b4 00 	call	0x168	; 0x168 <ENVIA_DATO>
			ENVIA_DATO(2);
 586:	82 e0       	ldi	r24, 0x02	; 2
 588:	0e 94 b4 00 	call	0x168	; 0x168 <ENVIA_DATO>
			
			ENVIA_DATO(3);
 58c:	83 e0       	ldi	r24, 0x03	; 3
 58e:	0e 94 b4 00 	call	0x168	; 0x168 <ENVIA_DATO>
			
			ENVIA_DATO(1);
 592:	81 e0       	ldi	r24, 0x01	; 1
 594:	0e 94 b4 00 	call	0x168	; 0x168 <ENVIA_DATO>
			
			CreateCustomChar(bat1,2);
 598:	62 e0       	ldi	r22, 0x02	; 2
 59a:	88 e1       	ldi	r24, 0x18	; 24
 59c:	91 e0       	ldi	r25, 0x01	; 1
 59e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <CreateCustomChar>
			CreateCustomChar(bat2,3);
 5a2:	63 e0       	ldi	r22, 0x03	; 3
 5a4:	80 e1       	ldi	r24, 0x10	; 16
 5a6:	91 e0       	ldi	r25, 0x01	; 1
 5a8:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <CreateCustomChar>
			CreateCustomChar(bat3,4);
 5ac:	64 e0       	ldi	r22, 0x04	; 4
 5ae:	88 e0       	ldi	r24, 0x08	; 8
 5b0:	91 e0       	ldi	r25, 0x01	; 1
 5b2:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <CreateCustomChar>
			CreateCustomChar(bat4,1);
 5b6:	61 e0       	ldi	r22, 0x01	; 1
 5b8:	80 e0       	ldi	r24, 0x00	; 0
 5ba:	91 e0       	ldi	r25, 0x01	; 1
 5bc:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <CreateCustomChar>
			
			
			//POS_LINEA2(1);
			//ENVIA_CADENA("Es +");
			
			break;
 5c0:	16 cf       	rjmp	.-468    	; 0x3ee <main+0x60>
			
			case '-':
			CreateCustomChar(pattern0,0);
 5c2:	60 e0       	ldi	r22, 0x00	; 0
 5c4:	80 e6       	ldi	r24, 0x60	; 96
 5c6:	91 e0       	ldi	r25, 0x01	; 1
 5c8:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <CreateCustomChar>
			CreateCustomChar(pattern1,1);
 5cc:	61 e0       	ldi	r22, 0x01	; 1
 5ce:	88 e5       	ldi	r24, 0x58	; 88
 5d0:	91 e0       	ldi	r25, 0x01	; 1
 5d2:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <CreateCustomChar>
			CreateCustomChar(pattern2,2);
 5d6:	62 e0       	ldi	r22, 0x02	; 2
 5d8:	80 e5       	ldi	r24, 0x50	; 80
 5da:	91 e0       	ldi	r25, 0x01	; 1
 5dc:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <CreateCustomChar>
			CreateCustomChar(pattern3,3);
 5e0:	63 e0       	ldi	r22, 0x03	; 3
 5e2:	88 e4       	ldi	r24, 0x48	; 72
 5e4:	91 e0       	ldi	r25, 0x01	; 1
 5e6:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <CreateCustomChar>
			
			CreateCustomChar(pattern4,4);
 5ea:	64 e0       	ldi	r22, 0x04	; 4
 5ec:	80 e4       	ldi	r24, 0x40	; 64
 5ee:	91 e0       	ldi	r25, 0x01	; 1
 5f0:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <CreateCustomChar>
			CreateCustomChar(pattern5,5);
 5f4:	65 e0       	ldi	r22, 0x05	; 5
 5f6:	88 e3       	ldi	r24, 0x38	; 56
 5f8:	91 e0       	ldi	r25, 0x01	; 1
 5fa:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <CreateCustomChar>
			CreateCustomChar(pattern6,6);
 5fe:	66 e0       	ldi	r22, 0x06	; 6
 600:	80 e3       	ldi	r24, 0x30	; 48
 602:	91 e0       	ldi	r25, 0x01	; 1
 604:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <CreateCustomChar>
			CreateCustomChar(pattern7,7);
 608:	67 e0       	ldi	r22, 0x07	; 7
 60a:	88 e2       	ldi	r24, 0x28	; 40
 60c:	91 e0       	ldi	r25, 0x01	; 1
 60e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <CreateCustomChar>
			//_delay_ms(200);
			break;
 612:	ed ce       	rjmp	.-550    	; 0x3ee <main+0x60>

00000614 <__tablejump2__>:
 614:	ee 0f       	add	r30, r30
 616:	ff 1f       	adc	r31, r31
 618:	05 90       	lpm	r0, Z+
 61a:	f4 91       	lpm	r31, Z
 61c:	e0 2d       	mov	r30, r0
 61e:	09 94       	ijmp

00000620 <_exit>:
 620:	f8 94       	cli

00000622 <__stop_program>:
 622:	ff cf       	rjmp	.-2      	; 0x622 <__stop_program>
