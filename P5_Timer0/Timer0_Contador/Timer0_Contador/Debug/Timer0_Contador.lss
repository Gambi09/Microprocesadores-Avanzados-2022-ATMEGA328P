
Timer0_Contador.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  000003ee  00000482  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800140  00800140  000004c2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004c2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000534  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011a3  00000000  00000000  000005f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007dc  00000000  00000000  00001797  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006e0  00000000  00000000  00001f73  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000230  00000000  00000000  00002654  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000503  00000000  00000000  00002884  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009a4  00000000  00000000  00002d87  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  0000372b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 38 01 	jmp	0x270	; 0x270 <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 06 01 	jmp	0x20c	; 0x20c <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ee       	ldi	r30, 0xEE	; 238
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 34       	cpi	r26, 0x40	; 64
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e4       	ldi	r26, 0x40	; 64
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 35       	cpi	r26, 0x52	; 82
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 92 01 	call	0x324	; 0x324 <main>
  9e:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ENVIA_CMD>:
	ENVIA_CMD(0x40+(Location*8));
	
	for (i=0; i<8; i++){
	ENVIA_DATO(Pattern[i]);	
	}
  a6:	98 2f       	mov	r25, r24
  a8:	90 7f       	andi	r25, 0xF0	; 240
  aa:	96 95       	lsr	r25
  ac:	96 95       	lsr	r25
  ae:	98 b9       	out	0x08, r25	; 8
  b0:	98 b1       	in	r25, 0x08	; 8
  b2:	9e 7f       	andi	r25, 0xFE	; 254
  b4:	98 b9       	out	0x08, r25	; 8
  b6:	98 b1       	in	r25, 0x08	; 8
  b8:	92 60       	ori	r25, 0x02	; 2
  ba:	98 b9       	out	0x08, r25	; 8
  bc:	ef e9       	ldi	r30, 0x9F	; 159
  be:	ff e0       	ldi	r31, 0x0F	; 15
  c0:	31 97       	sbiw	r30, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <ENVIA_CMD+0x1a>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <ENVIA_CMD+0x20>
  c6:	00 00       	nop
  c8:	98 b1       	in	r25, 0x08	; 8
  ca:	9d 7f       	andi	r25, 0xFD	; 253
  cc:	98 b9       	out	0x08, r25	; 8
  ce:	ef e3       	ldi	r30, 0x3F	; 63
  d0:	fc e9       	ldi	r31, 0x9C	; 156
  d2:	31 97       	sbiw	r30, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <ENVIA_CMD+0x2c>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <ENVIA_CMD+0x32>
  d8:	00 00       	nop
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	88 0f       	add	r24, r24
  de:	99 1f       	adc	r25, r25
  e0:	88 0f       	add	r24, r24
  e2:	99 1f       	adc	r25, r25
  e4:	8c 73       	andi	r24, 0x3C	; 60
  e6:	88 b9       	out	0x08, r24	; 8
  e8:	88 b1       	in	r24, 0x08	; 8
  ea:	8e 7f       	andi	r24, 0xFE	; 254
  ec:	88 b9       	out	0x08, r24	; 8
  ee:	88 b1       	in	r24, 0x08	; 8
  f0:	82 60       	ori	r24, 0x02	; 2
  f2:	88 b9       	out	0x08, r24	; 8
  f4:	8f e9       	ldi	r24, 0x9F	; 159
  f6:	9f e0       	ldi	r25, 0x0F	; 15
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <ENVIA_CMD+0x52>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <ENVIA_CMD+0x58>
  fe:	00 00       	nop
 100:	88 b1       	in	r24, 0x08	; 8
 102:	8d 7f       	andi	r24, 0xFD	; 253
 104:	88 b9       	out	0x08, r24	; 8
 106:	ef e3       	ldi	r30, 0x3F	; 63
 108:	fc e9       	ldi	r31, 0x9C	; 156
 10a:	31 97       	sbiw	r30, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <ENVIA_CMD+0x64>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <ENVIA_CMD+0x6a>
 110:	00 00       	nop
 112:	08 95       	ret

00000114 <LCD_INICIALIZA>:
 114:	8f ef       	ldi	r24, 0xFF	; 255
 116:	87 b9       	out	0x07, r24	; 7
 118:	8f e5       	ldi	r24, 0x5F	; 95
 11a:	9a ee       	ldi	r25, 0xEA	; 234
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <LCD_INICIALIZA+0x8>
 120:	00 c0       	rjmp	.+0      	; 0x122 <LCD_INICIALIZA+0xe>
 122:	00 00       	nop
 124:	82 e0       	ldi	r24, 0x02	; 2
 126:	0e 94 53 00 	call	0xa6	; 0xa6 <ENVIA_CMD>
 12a:	88 e2       	ldi	r24, 0x28	; 40
 12c:	0e 94 53 00 	call	0xa6	; 0xa6 <ENVIA_CMD>
 130:	8c e0       	ldi	r24, 0x0C	; 12
 132:	0e 94 53 00 	call	0xa6	; 0xa6 <ENVIA_CMD>
 136:	86 e0       	ldi	r24, 0x06	; 6
 138:	0e 94 53 00 	call	0xa6	; 0xa6 <ENVIA_CMD>
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	0e 94 53 00 	call	0xa6	; 0xa6 <ENVIA_CMD>
 142:	80 e8       	ldi	r24, 0x80	; 128
 144:	0e 94 53 00 	call	0xa6	; 0xa6 <ENVIA_CMD>
 148:	08 95       	ret

0000014a <ENVIA_DATO>:
 14a:	98 2f       	mov	r25, r24
 14c:	90 7f       	andi	r25, 0xF0	; 240
 14e:	96 95       	lsr	r25
 150:	96 95       	lsr	r25
 152:	98 b9       	out	0x08, r25	; 8
 154:	98 b1       	in	r25, 0x08	; 8
 156:	93 60       	ori	r25, 0x03	; 3
 158:	98 b9       	out	0x08, r25	; 8
 15a:	ef e9       	ldi	r30, 0x9F	; 159
 15c:	ff e0       	ldi	r31, 0x0F	; 15
 15e:	31 97       	sbiw	r30, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <ENVIA_DATO+0x14>
 162:	00 c0       	rjmp	.+0      	; 0x164 <ENVIA_DATO+0x1a>
 164:	00 00       	nop
 166:	98 b1       	in	r25, 0x08	; 8
 168:	9d 7f       	andi	r25, 0xFD	; 253
 16a:	98 b9       	out	0x08, r25	; 8
 16c:	98 b1       	in	r25, 0x08	; 8
 16e:	9e 7f       	andi	r25, 0xFE	; 254
 170:	98 b9       	out	0x08, r25	; 8
 172:	ef e3       	ldi	r30, 0x3F	; 63
 174:	fc e9       	ldi	r31, 0x9C	; 156
 176:	31 97       	sbiw	r30, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <ENVIA_DATO+0x2c>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <ENVIA_DATO+0x32>
 17c:	00 00       	nop
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	88 0f       	add	r24, r24
 182:	99 1f       	adc	r25, r25
 184:	88 0f       	add	r24, r24
 186:	99 1f       	adc	r25, r25
 188:	8c 73       	andi	r24, 0x3C	; 60
 18a:	88 b9       	out	0x08, r24	; 8
 18c:	88 b1       	in	r24, 0x08	; 8
 18e:	83 60       	ori	r24, 0x03	; 3
 190:	88 b9       	out	0x08, r24	; 8
 192:	8f e9       	ldi	r24, 0x9F	; 159
 194:	9f e0       	ldi	r25, 0x0F	; 15
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <ENVIA_DATO+0x4c>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <ENVIA_DATO+0x52>
 19c:	00 00       	nop
 19e:	88 b1       	in	r24, 0x08	; 8
 1a0:	8d 7f       	andi	r24, 0xFD	; 253
 1a2:	88 b9       	out	0x08, r24	; 8
 1a4:	88 b1       	in	r24, 0x08	; 8
 1a6:	8e 7f       	andi	r24, 0xFE	; 254
 1a8:	88 b9       	out	0x08, r24	; 8
 1aa:	ef e3       	ldi	r30, 0x3F	; 63
 1ac:	fc e9       	ldi	r31, 0x9C	; 156
 1ae:	31 97       	sbiw	r30, 0x01	; 1
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <ENVIA_DATO+0x64>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <ENVIA_DATO+0x6a>
 1b4:	00 00       	nop
 1b6:	08 95       	ret

000001b8 <ENVIA_CADENA>:
 1b8:	0f 93       	push	r16
 1ba:	1f 93       	push	r17
 1bc:	cf 93       	push	r28
 1be:	df 93       	push	r29
 1c0:	8c 01       	movw	r16, r24
 1c2:	c0 e0       	ldi	r28, 0x00	; 0
 1c4:	d0 e0       	ldi	r29, 0x00	; 0
 1c6:	03 c0       	rjmp	.+6      	; 0x1ce <ENVIA_CADENA+0x16>
 1c8:	0e 94 a5 00 	call	0x14a	; 0x14a <ENVIA_DATO>
 1cc:	21 96       	adiw	r28, 0x01	; 1
 1ce:	f8 01       	movw	r30, r16
 1d0:	ec 0f       	add	r30, r28
 1d2:	fd 1f       	adc	r31, r29
 1d4:	80 81       	ld	r24, Z
 1d6:	81 11       	cpse	r24, r1
 1d8:	f7 cf       	rjmp	.-18     	; 0x1c8 <ENVIA_CADENA+0x10>
 1da:	df 91       	pop	r29
 1dc:	cf 91       	pop	r28
 1de:	1f 91       	pop	r17
 1e0:	0f 91       	pop	r16
 1e2:	08 95       	ret

000001e4 <LIMPIA_LCD>:
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	0e 94 53 00 	call	0xa6	; 0xa6 <ENVIA_CMD>
 1ea:	08 95       	ret

000001ec <REGRESO_CASA>:
 1ec:	82 e0       	ldi	r24, 0x02	; 2
 1ee:	0e 94 53 00 	call	0xa6	; 0xa6 <ENVIA_CMD>
 1f2:	08 95       	ret

000001f4 <CURSOR_DER>:
 1f4:	8c e1       	ldi	r24, 0x1C	; 28
 1f6:	0e 94 53 00 	call	0xa6	; 0xa6 <ENVIA_CMD>
 1fa:	08 95       	ret

000001fc <POS_LINEA1>:
 1fc:	80 68       	ori	r24, 0x80	; 128
 1fe:	0e 94 53 00 	call	0xa6	; 0xa6 <ENVIA_CMD>
 202:	08 95       	ret

00000204 <POS_LINEA2>:
 204:	80 6c       	ori	r24, 0xC0	; 192
 206:	0e 94 53 00 	call	0xa6	; 0xa6 <ENVIA_CMD>
 20a:	08 95       	ret

0000020c <__vector_16>:

int a;
char str[16];

ISR (TIMER0_OVF_vect) 
{
 20c:	1f 92       	push	r1
 20e:	0f 92       	push	r0
 210:	0f b6       	in	r0, 0x3f	; 63
 212:	0f 92       	push	r0
 214:	11 24       	eor	r1, r1
 216:	2f 93       	push	r18
 218:	3f 93       	push	r19
 21a:	4f 93       	push	r20
 21c:	5f 93       	push	r21
 21e:	6f 93       	push	r22
 220:	7f 93       	push	r23
 222:	8f 93       	push	r24
 224:	9f 93       	push	r25
 226:	af 93       	push	r26
 228:	bf 93       	push	r27
 22a:	ef 93       	push	r30
 22c:	ff 93       	push	r31
	LIMPIA_LCD();
 22e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <LIMPIA_LCD>
	POS_LINEA1(0);
 232:	80 e0       	ldi	r24, 0x00	; 0
 234:	0e 94 fe 00 	call	0x1fc	; 0x1fc <POS_LINEA1>
	ENVIA_CADENA("Si, llegamos a  10");
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	91 e0       	ldi	r25, 0x01	; 1
 23c:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <ENVIA_CADENA>
	POS_LINEA2(0);
 240:	80 e0       	ldi	r24, 0x00	; 0
 242:	0e 94 02 01 	call	0x204	; 0x204 <POS_LINEA2>
	ENVIA_CADENA("esperemos otro lote");
 246:	83 e1       	ldi	r24, 0x13	; 19
 248:	91 e0       	ldi	r25, 0x01	; 1
 24a:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <ENVIA_CADENA>
	
	}
 24e:	ff 91       	pop	r31
 250:	ef 91       	pop	r30
 252:	bf 91       	pop	r27
 254:	af 91       	pop	r26
 256:	9f 91       	pop	r25
 258:	8f 91       	pop	r24
 25a:	7f 91       	pop	r23
 25c:	6f 91       	pop	r22
 25e:	5f 91       	pop	r21
 260:	4f 91       	pop	r20
 262:	3f 91       	pop	r19
 264:	2f 91       	pop	r18
 266:	0f 90       	pop	r0
 268:	0f be       	out	0x3f, r0	; 63
 26a:	0f 90       	pop	r0
 26c:	1f 90       	pop	r1
 26e:	18 95       	reti

00000270 <__vector_2>:

ISR (INT1_vect) {
 270:	1f 92       	push	r1
 272:	0f 92       	push	r0
 274:	0f b6       	in	r0, 0x3f	; 63
 276:	0f 92       	push	r0
 278:	11 24       	eor	r1, r1
 27a:	2f 93       	push	r18
 27c:	3f 93       	push	r19
 27e:	4f 93       	push	r20
 280:	5f 93       	push	r21
 282:	6f 93       	push	r22
 284:	7f 93       	push	r23
 286:	8f 93       	push	r24
 288:	9f 93       	push	r25
 28a:	af 93       	push	r26
 28c:	bf 93       	push	r27
 28e:	ef 93       	push	r30
 290:	ff 93       	push	r31
		a = TCNT0;
 292:	86 b5       	in	r24, 0x26	; 38
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <a+0x1>
 29a:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <a>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 29e:	4a e0       	ldi	r20, 0x0A	; 10
 2a0:	60 e4       	ldi	r22, 0x40	; 64
 2a2:	71 e0       	ldi	r23, 0x01	; 1
 2a4:	0e 94 c0 01 	call	0x380	; 0x380 <__itoa_ncheck>
		itoa(a, str, 10);
		LIMPIA_LCD();
 2a8:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <LIMPIA_LCD>
		POS_LINEA1(0);
 2ac:	80 e0       	ldi	r24, 0x00	; 0
 2ae:	0e 94 fe 00 	call	0x1fc	; 0x1fc <POS_LINEA1>
		ENVIA_CADENA("Bienvenido");
 2b2:	87 e2       	ldi	r24, 0x27	; 39
 2b4:	91 e0       	ldi	r25, 0x01	; 1
 2b6:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <ENVIA_CADENA>
		POS_LINEA2(3);
 2ba:	83 e0       	ldi	r24, 0x03	; 3
 2bc:	0e 94 02 01 	call	0x204	; 0x204 <POS_LINEA2>
		ENVIA_CADENA("cliente ");
 2c0:	82 e3       	ldi	r24, 0x32	; 50
 2c2:	91 e0       	ldi	r25, 0x01	; 1
 2c4:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <ENVIA_CADENA>
		ENVIA_CADENA(str);
 2c8:	80 e4       	ldi	r24, 0x40	; 64
 2ca:	91 e0       	ldi	r25, 0x01	; 1
 2cc:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <ENVIA_CADENA>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2d0:	2f ef       	ldi	r18, 0xFF	; 255
 2d2:	89 e6       	ldi	r24, 0x69	; 105
 2d4:	98 e1       	ldi	r25, 0x18	; 24
 2d6:	21 50       	subi	r18, 0x01	; 1
 2d8:	80 40       	sbci	r24, 0x00	; 0
 2da:	90 40       	sbci	r25, 0x00	; 0
 2dc:	e1 f7       	brne	.-8      	; 0x2d6 <__vector_2+0x66>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <__vector_2+0x70>
 2e0:	00 00       	nop
		_delay_ms(500);
	LIMPIA_LCD();
 2e2:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <LIMPIA_LCD>
	POS_LINEA1(3);
 2e6:	83 e0       	ldi	r24, 0x03	; 3
 2e8:	0e 94 fe 00 	call	0x1fc	; 0x1fc <POS_LINEA1>
	ENVIA_CADENA(str);
 2ec:	80 e4       	ldi	r24, 0x40	; 64
 2ee:	91 e0       	ldi	r25, 0x01	; 1
 2f0:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <ENVIA_CADENA>
	POS_LINEA2(3);
 2f4:	83 e0       	ldi	r24, 0x03	; 3
 2f6:	0e 94 02 01 	call	0x204	; 0x204 <POS_LINEA2>
	ENVIA_CADENA("OPEN");
 2fa:	8b e3       	ldi	r24, 0x3B	; 59
 2fc:	91 e0       	ldi	r25, 0x01	; 1
 2fe:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <ENVIA_CADENA>
}
 302:	ff 91       	pop	r31
 304:	ef 91       	pop	r30
 306:	bf 91       	pop	r27
 308:	af 91       	pop	r26
 30a:	9f 91       	pop	r25
 30c:	8f 91       	pop	r24
 30e:	7f 91       	pop	r23
 310:	6f 91       	pop	r22
 312:	5f 91       	pop	r21
 314:	4f 91       	pop	r20
 316:	3f 91       	pop	r19
 318:	2f 91       	pop	r18
 31a:	0f 90       	pop	r0
 31c:	0f be       	out	0x3f, r0	; 63
 31e:	0f 90       	pop	r0
 320:	1f 90       	pop	r1
 322:	18 95       	reti

00000324 <main>:

int main(void)
{
    /* Replace with your application code */
	cli();
 324:	f8 94       	cli
	LCD_INICIALIZA();
 326:	0e 94 8a 00 	call	0x114	; 0x114 <LCD_INICIALIZA>
	REGRESO_CASA();
 32a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <REGRESO_CASA>
	CURSOR_DER();
 32e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <CURSOR_DER>
	//PD4 ENTRA CLK EXTERNA()
	//CONTAMOS CUANTAS PERSONAS ENTRAN EN EL LCD
	DDRD = 0XF0;
 332:	80 ef       	ldi	r24, 0xF0	; 240
 334:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0b00011000;
 336:	88 e1       	ldi	r24, 0x18	; 24
 338:	8b b9       	out	0x0b, r24	; 11
	//External T0 pin Clock on falling edge
	TCCR0B = (1<<CS02)|(1<<CS01)|(0<<CS00);
 33a:	86 e0       	ldi	r24, 0x06	; 6
 33c:	85 bd       	out	0x25, r24	; 37
	//TCCR0B = (0<<WGM00)|(1<<WGM01);
	TIMSK0 = (1<<TOIE0);
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	 
	 
	OCR0B = 2;
 344:	82 e0       	ldi	r24, 0x02	; 2
 346:	88 bd       	out	0x28, r24	; 40
	TCNT0 = 0;
 348:	16 bc       	out	0x26, r1	; 38
	
	EIMSK |= (1<<INT1);
 34a:	8d b3       	in	r24, 0x1d	; 29
 34c:	82 60       	ori	r24, 0x02	; 2
 34e:	8d bb       	out	0x1d, r24	; 29
	EICRA |= (1<<ISC01)|(1<<ISC00);
 350:	e9 e6       	ldi	r30, 0x69	; 105
 352:	f0 e0       	ldi	r31, 0x00	; 0
 354:	80 81       	ld	r24, Z
 356:	83 60       	ori	r24, 0x03	; 3
 358:	80 83       	st	Z, r24
	 
	sei();
 35a:	78 94       	sei
	
    LIMPIA_LCD();
 35c:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <LIMPIA_LCD>
    POS_LINEA2(3);
 360:	83 e0       	ldi	r24, 0x03	; 3
 362:	0e 94 02 01 	call	0x204	; 0x204 <POS_LINEA2>
    ENVIA_DATO('O');
 366:	8f e4       	ldi	r24, 0x4F	; 79
 368:	0e 94 a5 00 	call	0x14a	; 0x14a <ENVIA_DATO>
    ENVIA_DATO('P');
 36c:	80 e5       	ldi	r24, 0x50	; 80
 36e:	0e 94 a5 00 	call	0x14a	; 0x14a <ENVIA_DATO>
    ENVIA_DATO('E');
 372:	85 e4       	ldi	r24, 0x45	; 69
 374:	0e 94 a5 00 	call	0x14a	; 0x14a <ENVIA_DATO>
    ENVIA_DATO('N');
 378:	8e e4       	ldi	r24, 0x4E	; 78
 37a:	0e 94 a5 00 	call	0x14a	; 0x14a <ENVIA_DATO>
 37e:	ff cf       	rjmp	.-2      	; 0x37e <main+0x5a>

00000380 <__itoa_ncheck>:
 380:	bb 27       	eor	r27, r27
 382:	4a 30       	cpi	r20, 0x0A	; 10
 384:	31 f4       	brne	.+12     	; 0x392 <__itoa_ncheck+0x12>
 386:	99 23       	and	r25, r25
 388:	22 f4       	brpl	.+8      	; 0x392 <__itoa_ncheck+0x12>
 38a:	bd e2       	ldi	r27, 0x2D	; 45
 38c:	90 95       	com	r25
 38e:	81 95       	neg	r24
 390:	9f 4f       	sbci	r25, 0xFF	; 255
 392:	0c 94 cc 01 	jmp	0x398	; 0x398 <__utoa_common>

00000396 <__utoa_ncheck>:
 396:	bb 27       	eor	r27, r27

00000398 <__utoa_common>:
 398:	fb 01       	movw	r30, r22
 39a:	55 27       	eor	r21, r21
 39c:	aa 27       	eor	r26, r26
 39e:	88 0f       	add	r24, r24
 3a0:	99 1f       	adc	r25, r25
 3a2:	aa 1f       	adc	r26, r26
 3a4:	a4 17       	cp	r26, r20
 3a6:	10 f0       	brcs	.+4      	; 0x3ac <__utoa_common+0x14>
 3a8:	a4 1b       	sub	r26, r20
 3aa:	83 95       	inc	r24
 3ac:	50 51       	subi	r21, 0x10	; 16
 3ae:	b9 f7       	brne	.-18     	; 0x39e <__utoa_common+0x6>
 3b0:	a0 5d       	subi	r26, 0xD0	; 208
 3b2:	aa 33       	cpi	r26, 0x3A	; 58
 3b4:	08 f0       	brcs	.+2      	; 0x3b8 <__utoa_common+0x20>
 3b6:	a9 5d       	subi	r26, 0xD9	; 217
 3b8:	a1 93       	st	Z+, r26
 3ba:	00 97       	sbiw	r24, 0x00	; 0
 3bc:	79 f7       	brne	.-34     	; 0x39c <__utoa_common+0x4>
 3be:	b1 11       	cpse	r27, r1
 3c0:	b1 93       	st	Z+, r27
 3c2:	11 92       	st	Z+, r1
 3c4:	cb 01       	movw	r24, r22
 3c6:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <strrev>

000003ca <strrev>:
 3ca:	dc 01       	movw	r26, r24
 3cc:	fc 01       	movw	r30, r24
 3ce:	67 2f       	mov	r22, r23
 3d0:	71 91       	ld	r23, Z+
 3d2:	77 23       	and	r23, r23
 3d4:	e1 f7       	brne	.-8      	; 0x3ce <strrev+0x4>
 3d6:	32 97       	sbiw	r30, 0x02	; 2
 3d8:	04 c0       	rjmp	.+8      	; 0x3e2 <strrev+0x18>
 3da:	7c 91       	ld	r23, X
 3dc:	6d 93       	st	X+, r22
 3de:	70 83       	st	Z, r23
 3e0:	62 91       	ld	r22, -Z
 3e2:	ae 17       	cp	r26, r30
 3e4:	bf 07       	cpc	r27, r31
 3e6:	c8 f3       	brcs	.-14     	; 0x3da <strrev+0x10>
 3e8:	08 95       	ret

000003ea <_exit>:
 3ea:	f8 94       	cli

000003ec <__stop_program>:
 3ec:	ff cf       	rjmp	.-2      	; 0x3ec <__stop_program>
